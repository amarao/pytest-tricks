name: Debug Test Failures With Pdb
---
author: hackebrot
---
content:

# Tracebacks
Pytest excels at helping you with test failures.  After running your tests via
py.test, you will see an error report with a detailed traceback for each of the
failures, if any.  You can change the mode in which output is presented to you
via the ``--tb`` cli option:

```text
py.test --tb=auto    # (default) 'long' tracebacks for the first and last
                     # entry, but 'short' style for the other entries
py.test --tb=long    # exhaustive, informative traceback formatting
py.test --tb=short   # shorter traceback format
py.test --tb=line    # only one line per failure
py.test --tb=native  # Python standard library formatting
py.test --tb=no      # no traceback at all
```

# Debugger
Have you ever heard of [pdb - the Python Debugger][pdb]?
I strongly recommend checking it out, if you haven't used it yet. The standard
library's built-in debugger will prove useful for debugging your Python code
without installing any external dependencies or setting up some fancy IDE.

If invoked with the ``--pdb`` option, pytest will place a debugger breakpoint
whenever an error occurs in your tests.

```text
$ py.test --pdb
```
You can also set a debugger breakpoint yourself with ``import pdb;
pdb.set_trace()``.

Use commands ``help``, ``list`` and ``pp`` to inspect the test code.

If you want to get a list of all local variables and their value, it's best to
run pytest with the ``-l`` option enabled, as ``locals()`` may contain internal
pytest items if you print it from the breakpoint.

[pdb]: https://docs.python.org/3.5/library/pdb.html

---
date: 2016-02-28
---
docs: https://pytest.org/latest/usage.html
---
tags:

debugger
invocation
options
---
tldr: Combine options ``-x``, ``-l``, ``--lf`` and ``--tb=long`` to analyze
results. Drop to the built-in debugger with ``--pdb``.
